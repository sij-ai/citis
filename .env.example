# =========================================================
# cit.is Environment Configuration
# =========================================================

# INSTRUCTIONS:
# 1. Copy this file to a new file named `.env` in the same directory.
# 2. Fill in the required values for your environment.
# 3. Never commit your .env file to version control.

# =========================================================
# CORE DJANGO SETTINGS
# =========================================================

# A long, random string used for cryptographic signing.
# Generate a new one for production with:
# python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=django-insecure-a-very-secret-key-for-development

# Set to 'False' for production environments.
DEBUG=True

# Comma-separated list of host/domain names this site can serve.
# In production, this should be your actual domain name, e.g., 'cit.is,www.cit.is'
ALLOWED_HOSTS=localhost,127.0.0.1

# =========================================================
# DATABASE CONFIGURATION
# =========================================================

# Database type: 'sqlite' (default) or 'postgres'
# This determines which database backend Django will use.
DB_TYPE=sqlite

# --- PostgreSQL Settings (only needed if DB_TYPE=postgres) ---
# Host where PostgreSQL is running
POSTGRES_HOST=localhost

# Port PostgreSQL is listening on
POSTGRES_PORT=5432

# Name of the PostgreSQL database
POSTGRES_DB=citis

# PostgreSQL username
POSTGRES_USER=citis

# PostgreSQL password
POSTGRES_PASSWORD=your_secure_password_here

# --- SQLite Settings (only needed if DB_TYPE=sqlite, optional) ---
# Path to SQLite database file. If not set, defaults to 'db.sqlite3' in project root.
# SQLITE_PATH=./custom_database.sqlite3

# --- Examples ---
# For development with SQLite (default):
#   DB_TYPE=sqlite
#   # No other database settings needed
#
# For production with PostgreSQL:
#   DB_TYPE=postgres
#   POSTGRES_HOST=your-db-host.com
#   POSTGRES_PORT=5432
#   POSTGRES_DB=citis_production
#   POSTGRES_USER=citis_user
#   POSTGRES_PASSWORD=super_secure_password
#
# For local development with Docker PostgreSQL:
#   DB_TYPE=postgres
#   POSTGRES_HOST=localhost
#   POSTGRES_PORT=5432
#   POSTGRES_DB=citis
#   POSTGRES_USER=citis
#   POSTGRES_PASSWORD=your_password

# =========================================================
# CELERY & REDIS CONFIGURATION
# =========================================================

# URL for the Redis server, used by Celery for task queuing and results.
# Format: redis://[password]@[hostname]:[port]/[db_number]
REDIS_URL=redis://localhost:6379/0

# --- Individual Redis Settings (for Docker Compose) ---
# Redis port (used by Docker services)
REDIS_PORT=6379

# Redis password (optional, leave empty for no password)
REDIS_PASSWORD=

# =========================================================
# DOCKER CONFIGURATION (Optional)
# =========================================================

# Port for containerized Django app (only needed for full Docker stack)
# Usage: docker-compose --profile full-stack up -d
WEB_PORT=8000

# =========================================================
# SERVER & APP CONFIGURATION
# =========================================================

# The full base URL of the server, including the protocol and port.
# This is used for generating absolute URLs in emails, APIs, etc.
SERVER_BASE_URL=http://localhost:8000

# A prefix for all generated short URLs (optional).
SERVER_URL_PREFIX=

# Require an API key for write operations via the API.
SERVER_REQUIRE_API_KEY=True

# The master API key that has superuser-level access.
# Generate a cryptographically secure key for this.
MASTER_API_KEY=your-super-secret-master-api-key-here

# Credentials for the administrative user associated with the master API key.
# This user will be created on initial setup.
# CHANGE THIS PASSWORD.
MASTER_USER_EMAIL=admin@example.com
MASTER_USER_PASSWORD=changeme123

# =========================================================
# EMAIL CONFIGURATION
# =========================================================
# For production (when DEBUG=False), configure your SMTP provider here.
# For development (DEBUG=True), emails are printed to the console by default.

EMAIL_HOST=
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=

# Default email addresses for automated messages.
# If left blank, these will be derived from SERVER_BASE_URL.
DEFAULT_FROM_EMAIL=
SERVER_EMAIL=

# =========================================================
# STRIPE PAYMENT CONFIGURATION
# =========================================================

# Get your API keys from the Stripe Dashboard: https://dashboard.stripe.com/apikeys
# Use your test keys for development.
STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_SECRET_KEY=sk_test_...

# The webhook signing secret for receiving events from Stripe.
# Get this from the webhooks section of your Stripe Dashboard.
STRIPE_WEBHOOK_SECRET=whsec_...

# Stripe Price IDs (get these from Stripe Dashboard â†’ Products)
STRIPE_PRICE_PREMIUM_MONTHLY=price_...
STRIPE_PRICE_PREMIUM_YEARLY=price_...

# =========================================================
# ARCHIVING CONFIGURATION
# =========================================================

# --- General Archive Settings ---
# The primary archiving backend to use. Currently 'singlefile'.
ARCHIVE_MODE=singlefile

# The length of the randomly generated shortcode for archived links.
SHORTCODE_LENGTH=8

# Time in seconds. A warning is logged if the server time and fetched page time
# differ by more than this threshold.
TIMEDIFF_WARNING_THRESHOLD=7200

# --- SingleFile Archiver Settings ---
# Path to the 'single-file' executable.
SINGLEFILE_EXECUTABLE_PATH=single-file

# Directory where generated HTML archives will be stored.
SINGLEFILE_DATA_PATH=./archives

# Timeout in seconds for the SingleFile process.
SINGLEFILE_TIMEOUT=60

# --- Optional Media Generation (via SingleFile) ---
SINGLEFILE_GENERATE_SCREENSHOT=False
SINGLEFILE_GENERATE_PDF=False
SINGLEFILE_SCREENSHOT_WIDTH=1920
SINGLEFILE_SCREENSHOT_HEIGHT=1080

# --- ArchiveBox Integration (Optional) ---
# Expose a link to the ArchiveBox instance in the overlay banner.
ARCHIVEBOX_EXPOSE_URL=False

# Base URL of your running ArchiveBox instance.
ARCHIVEBOX_BASE_URL=

# Path to the ArchiveBox data directory (if running on the same machine).
ARCHIVEBOX_DATA_PATH=

# =========================================================
# OVERLAY BANNER CONFIGURATION
# =========================================================
# The banner shown on top of archived pages.

OVERLAY_STYLE_BACKGROUND_COLOR=#000000
OVERLAY_STYLE_LINK_COLOR=#ffe100
OVERLAY_STYLE_ACCENT_COLOR=#ffe100

# Optional URL to a custom icon (e.g., your site's favicon).
OVERLAY_STYLE_ICON=

# The character or emoji used for the "copy link" button.
OVERLAY_STYLE_COPY_GRAPHIC=ðŸ“‹

# Domain name to display in the banner.
# If blank, it's automatically derived from SERVER_BASE_URL.
OVERLAY_SERVER_DOMAIN=

# =========================================================
# GEOLOCATION & LOGGING
# =========================================================

# Path to the GeoLite2-Country.mmdb database file for IP-based geolocation.
GEOLITE_DB_PATH=

# Log level for the application. Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# =========================================================
# RESIDENTIAL PROXY CONFIGURATION (Optional)
# =========================================================
# Use residential proxies to avoid being blocked when archiving certain sites.

RESIDENTIAL_PROXY_ENABLED=False
RESIDENTIAL_PROXY_PROVIDER=brightdata

# --- Bright Data Provider Settings ---
BRIGHTDATA_USERNAME=
BRIGHTDATA_PASSWORD=
BRIGHTDATA_ENDPOINT=brd.superproxy.io
BRIGHTDATA_PORT=22225

# A fallback proxy URL (e.g., http://user:pass@host:port) if the provider fails.
FALLBACK_PROXY_URL=

# Strategy for selecting a proxy from the provider pool: 'closest', 'random'.
PROXY_SELECTION_STRATEGY=closest

# For 'closest' strategy, the max distance in km to search for a proxy.
PROXY_MAX_DISTANCE_KM=500
