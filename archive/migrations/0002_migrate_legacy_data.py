# Generated by Django 5.2.4 on 2025-07-06 22:18

from django.db import migrations
import sqlite3
import os
from django.utils import timezone
from datetime import datetime


def migrate_legacy_data(apps, schema_editor):
    """
    Migrate data from the legacy FastAPI database to Django models.
    """
    # Get model classes
    CustomUser = apps.get_model('accounts', 'CustomUser')
    ApiKey = apps.get_model('archive', 'ApiKey')
    Shortcode = apps.get_model('archive', 'Shortcode')
    Visit = apps.get_model('archive', 'Visit')
    
    # Path to old database (relative to project root)
    old_db_path = os.path.join(os.path.dirname(__file__), '..', '..', '..', 'fastapi_based', 'deepcite.db')
    old_db_path = os.path.normpath(old_db_path)
    
    if not os.path.exists(old_db_path):
        print(f"Legacy database not found at {old_db_path}")
        return
    
    print(f"Migrating data from {old_db_path}")
    
    # Connect to old database
    conn = sqlite3.connect(old_db_path)
    conn.row_factory = sqlite3.Row  # Enable dict-like access to rows
    cursor = conn.cursor()
    
    try:
        # 1. Create a default anonymous user for shortcodes without API keys
        default_user, created = CustomUser.objects.get_or_create(
            username='anonymous_legacy',
            defaults={
                'email': 'anonymous@legacy.local',
                'display_name': 'Legacy Anonymous User',
                'is_premium': False,
                'monthly_shortcode_limit': 0,  # No limits for legacy user
            }
        )
        if created:
            print("Created default anonymous user for legacy data")
        
        # 2. Migrate API keys and create corresponding users
        print("Migrating API keys...")
        cursor.execute("SELECT * FROM api_keys")
        api_key_rows = cursor.fetchall()
        
        api_key_mapping = {}  # Maps old api_key string to new ApiKey object
        user_mapping = {}     # Maps account string to CustomUser object
        
        for row in api_key_rows:
            # Create or get user for this API key account
            account = row['account'] or f"api_user_{row['api_key'][:8]}"
            
            user, created = CustomUser.objects.get_or_create(
                username=account,
                defaults={
                    'email': f"{account}@legacy.local",
                    'display_name': account,
                    'is_premium': False,
                    'monthly_shortcode_limit': 1000,  # Default limit for API users
                }
            )
            user_mapping[account] = user
            
            # Create API key
            api_key = ApiKey.objects.create(
                key=row['api_key'],
                user=user,
                name=row['description'] or f"Legacy API Key {row['api_key'][:8]}",
                description=row['description'] or "Migrated from legacy database",
                max_uses_total=row['max_uses_total'],
                max_uses_per_day=row['max_uses_per_day'],
                is_active=bool(row['is_active']),
                created_at=timezone.now(),  # Original creation date not available
            )
            api_key_mapping[row['api_key']] = api_key
            
            print(f"Migrated API key: {row['api_key'][:8]}... for user {account}")
        
        print(f"Migrated {len(api_key_rows)} API keys")
        
        # 3. Migrate shortcodes
        print("Migrating shortcodes...")
        cursor.execute("SELECT * FROM shortcodes")
        shortcode_rows = cursor.fetchall()
        
        shortcode_mapping = {}  # Maps old shortcode to new Shortcode object
        
        for row in shortcode_rows:
            # Parse created_at timestamp
            try:
                if row['created_at']:
                    created_at = datetime.fromisoformat(row['created_at'].replace('+00:00', ''))
                    if created_at.tzinfo is None:
                        created_at = timezone.make_aware(created_at)
                else:
                    created_at = timezone.now()
            except (ValueError, AttributeError):
                created_at = timezone.now()
            
            # Determine creator user and API key
            creator_user = default_user
            creator_api_key = None
            
            if row['creator_key'] and row['creator_key'] in api_key_mapping:
                creator_api_key = api_key_mapping[row['creator_key']]
                creator_user = creator_api_key.user
            
            # Create shortcode
            shortcode = Shortcode.objects.create(
                shortcode=row['shortcode'],
                url=row['url'],
                created_at=created_at,
                creator_user=creator_user,
                creator_api_key=creator_api_key,
                creator_ip=row['creator_ip'],
                text_fragment=row['text_fragment'] or '',
                archive_method=row['archive_method'] or 'singlefile',
                is_archived=True,  # Assume legacy shortcodes were archived
                archive_path='',   # Legacy archive path not available
            )
            shortcode_mapping[row['shortcode']] = shortcode
            
        print(f"Migrated {len(shortcode_rows)} shortcodes")
        
        # 4. Migrate visits
        print("Migrating visits...")
        cursor.execute("SELECT * FROM visits")
        visit_rows = cursor.fetchall()
        
        for row in visit_rows:
            # Parse visited_at timestamp
            try:
                if row['visited_at']:
                    visited_at = datetime.fromisoformat(row['visited_at'].replace('+00:00', ''))
                    if visited_at.tzinfo is None:
                        visited_at = timezone.make_aware(visited_at)
                else:
                    visited_at = timezone.now()
            except (ValueError, AttributeError):
                visited_at = timezone.now()
            
            # Find corresponding shortcode
            shortcode_obj = shortcode_mapping.get(row['shortcode'])
            if not shortcode_obj:
                print(f"Warning: Visit references unknown shortcode: {row['shortcode']}")
                continue
            
            # Create visit
            Visit.objects.create(
                shortcode=shortcode_obj,
                visited_at=visited_at,
                ip_address=row['ip_address'],
                user_agent=row['user_agent'] or '',
                referer=row['referer'] or '',
                country='',  # GeoIP data not available in legacy
                city='',     # GeoIP data not available in legacy
            )
        
        print(f"Migrated {len(visit_rows)} visits")
        
        # 5. Summary
        print("\n=== Migration Summary ===")
        print(f"API Keys: {ApiKey.objects.count()}")
        print(f"Users: {CustomUser.objects.count()}")
        print(f"Shortcodes: {Shortcode.objects.count()}")
        print(f"Visits: {Visit.objects.count()}")
        print("Legacy data migration completed successfully!")
        
    except Exception as e:
        print(f"Error during migration: {e}")
        raise
    finally:
        conn.close()


def reverse_migrate_legacy_data(apps, schema_editor):
    """
    Reverse migration - delete all migrated data.
    Warning: This will delete ALL data in the Django database!
    """
    CustomUser = apps.get_model('accounts', 'CustomUser')
    ApiKey = apps.get_model('archive', 'ApiKey')
    Shortcode = apps.get_model('archive', 'Shortcode')
    Visit = apps.get_model('archive', 'Visit')
    
    print("Reversing legacy data migration...")
    Visit.objects.all().delete()
    Shortcode.objects.all().delete()
    ApiKey.objects.all().delete()
    CustomUser.objects.all().delete()
    print("All migrated data has been deleted.")


class Migration(migrations.Migration):

    dependencies = [
        ("archive", "0001_initial"),
        ("accounts", "0001_initial"),  # Ensure accounts migration has run
    ]

    operations = [
        migrations.RunPython(
            migrate_legacy_data,
            reverse_migrate_legacy_data,
        ),
    ]
